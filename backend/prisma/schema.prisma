// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String          @id// congito_subを使う
  name        String?       
  email       String          @unique
  albums      Album[]         @relation("UserAlbums")
  photos      Photo[]         @relation("UserPhotos")
  albumMembers  AlbumMember[] 
  sentShares    AlbumShare[]  @relation("SentShares")
  receivedShares AlbumShare[] @relation("ReceivedShares") 
}

model Album {
  id              String          @id @default(uuid())
  name            String
  parent_album_id String?
  parent_album    Album?          @relation("ParentAlbum", fields: [parent_album_id], references: [id])
  sub_albums      Album[]         @relation("ParentAlbum")
  owner_user_id   String
  owner           User            @relation("UserAlbums", fields: [owner_user_id], references: [id])
  photos          Photo[]
  albumMembers     AlbumMember[]  
  albumShares     AlbumShare[]
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  is_deleted      Boolean         @default(false)
}


model AlbumMember {
  id        String   @id @default(uuid())
  album     Album    @relation(fields: [album_id], references: [id])
  album_id  String
  user      User     @relation(fields: [user_id], references: [id])
  user_id   String
  role      String  

  @@unique([album_id, user_id]) // 同一アルバムに同一ユーザーは一つのロールのみ
}


model Photo {
  id                  String     @id @default(uuid())
  album_id            String
  album               Album      @relation(fields: [album_id], references: [id])
  s3_key              String     @unique
  name                String
  meta                String?
  uploaded_by_user_id String
  uploader            User       @relation("UserPhotos", fields: [uploaded_by_user_id], references: [id])
  created_at          DateTime   @default(now())
  updated_at          DateTime   @updatedAt
  is_deleted          Boolean    @default(false)
}

model AlbumShare {
  id              String   @id @default(uuid())
  album_id        String
  album           Album    @relation(fields: [album_id], references: [id], onDelete: Cascade)
  invited_by_user_id String
  invited_by_user   User   @relation("SentShares", fields: [invited_by_user_id], references: [id])
  invited_email   String 
  invited_user_id String? 
  invited_user    User?    @relation("ReceivedShares", fields: [invited_user_id], references: [id])
  role            String  
  invitation_token String  @unique
  status          String   @default("pending")  // "pending", "accepted", "expired", "revoked"
  expires_at      DateTime
  invited_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@index([album_id])
  @@index([invited_email])
  @@index([invitation_token])
}